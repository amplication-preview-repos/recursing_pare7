/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PostView as PrismaPostView } from "@prisma/client";

export class PostViewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PostViewCountArgs, "select">): Promise<number> {
    return this.prisma.postView.count(args);
  }

  async postViews<T extends Prisma.PostViewFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostViewFindManyArgs>
  ): Promise<PrismaPostView[]> {
    return this.prisma.postView.findMany<Prisma.PostViewFindManyArgs>(args);
  }
  async postView<T extends Prisma.PostViewFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostViewFindUniqueArgs>
  ): Promise<PrismaPostView | null> {
    return this.prisma.postView.findUnique(args);
  }
  async createPostView<T extends Prisma.PostViewCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostViewCreateArgs>
  ): Promise<PrismaPostView> {
    return this.prisma.postView.create<T>(args);
  }
  async updatePostView<T extends Prisma.PostViewUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostViewUpdateArgs>
  ): Promise<PrismaPostView> {
    return this.prisma.postView.update<T>(args);
  }
  async deletePostView<T extends Prisma.PostViewDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PostViewDeleteArgs>
  ): Promise<PrismaPostView> {
    return this.prisma.postView.delete(args);
  }
}
