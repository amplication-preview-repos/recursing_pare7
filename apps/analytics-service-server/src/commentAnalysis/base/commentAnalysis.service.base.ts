/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CommentAnalysis as PrismaCommentAnalysis,
} from "@prisma/client";

export class CommentAnalysisServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommentAnalysisCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commentAnalysis.count(args);
  }

  async commentAnalyses<T extends Prisma.CommentAnalysisFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentAnalysisFindManyArgs>
  ): Promise<PrismaCommentAnalysis[]> {
    return this.prisma.commentAnalysis.findMany<Prisma.CommentAnalysisFindManyArgs>(
      args
    );
  }
  async commentAnalysis<T extends Prisma.CommentAnalysisFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentAnalysisFindUniqueArgs>
  ): Promise<PrismaCommentAnalysis | null> {
    return this.prisma.commentAnalysis.findUnique(args);
  }
  async createCommentAnalysis<T extends Prisma.CommentAnalysisCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentAnalysisCreateArgs>
  ): Promise<PrismaCommentAnalysis> {
    return this.prisma.commentAnalysis.create<T>(args);
  }
  async updateCommentAnalysis<T extends Prisma.CommentAnalysisUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentAnalysisUpdateArgs>
  ): Promise<PrismaCommentAnalysis> {
    return this.prisma.commentAnalysis.update<T>(args);
  }
  async deleteCommentAnalysis<T extends Prisma.CommentAnalysisDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommentAnalysisDeleteArgs>
  ): Promise<PrismaCommentAnalysis> {
    return this.prisma.commentAnalysis.delete(args);
  }
}
