/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AnalyticsEvent as PrismaAnalyticsEvent } from "@prisma/client";

export class AnalyticsEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalyticsEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analyticsEvent.count(args);
  }

  async analyticsEvents<T extends Prisma.AnalyticsEventFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalyticsEventFindManyArgs>
  ): Promise<PrismaAnalyticsEvent[]> {
    return this.prisma.analyticsEvent.findMany<Prisma.AnalyticsEventFindManyArgs>(
      args
    );
  }
  async analyticsEvent<T extends Prisma.AnalyticsEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalyticsEventFindUniqueArgs>
  ): Promise<PrismaAnalyticsEvent | null> {
    return this.prisma.analyticsEvent.findUnique(args);
  }
  async createAnalyticsEvent<T extends Prisma.AnalyticsEventCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalyticsEventCreateArgs>
  ): Promise<PrismaAnalyticsEvent> {
    return this.prisma.analyticsEvent.create<T>(args);
  }
  async updateAnalyticsEvent<T extends Prisma.AnalyticsEventUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalyticsEventUpdateArgs>
  ): Promise<PrismaAnalyticsEvent> {
    return this.prisma.analyticsEvent.update<T>(args);
  }
  async deleteAnalyticsEvent<T extends Prisma.AnalyticsEventDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalyticsEventDeleteArgs>
  ): Promise<PrismaAnalyticsEvent> {
    return this.prisma.analyticsEvent.delete(args);
  }
}
